doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport' content='width=device-width, initial-scale=1.0')
    title PSLvis
    // Include Bootstrap CSS from CDN
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet')
    link(href="https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/css/materialdesignicons.min.css" rel="stylesheet") 
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous")
    script(src="https://cdn.jsdelivr.net/npm/htmx.org@1.9.11/dist/htmx.min.js")
    script(src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js")
    script(src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js")
  body
    if standalone
      header.navbar.navbar-expand-lg.sticky-top.bg-success-subtle
        nav.container-xxl.flex-wrap.flex-lg-nowrap 
          ul.nav 
            li.nav-item 
              h1 PSLvis
          ul.nav
            li.nav-item
              a.link-secondary.link-underline.link-underline-opacity-0(href="https://github.com/TRR318/scikit-psl")
                span.mdi.mdi-github.fs-4.btn.btn-sm
                span Algorithm
            li.nav-item
              a.link-secondary.link-underline.link-underline-opacity-0(href="https://github.com/TRR318/pslvis")
                span.mdi.mdi-github.fs-4.btn.btn-sm
                span Visualization

    #history.offcanvas.offcanvas-end(tabindex="-1")
      include history.pug

    .container.mt-5
      .row
        .col-sm-6.col-lg-4
          h4 Interactive PSL
          p You can drag and drop features from left to right and observe how the performance changes
          //p Predict the presence of breast cancer. Which features would be most influencial?
          p Predict whether a student is likely to drop out of university. Which features would be most influencial?
        .col-sm-6.offset-lg-4.col-lg-4
          canvas#chart(height="180px")
    #model-container.container.mt-5
      include pslresult.pug
    #spinner.position-fixed.top-50.start-50.spinner-border.htmx-indicator
      
    

    style.
      .ghost :not(.label){
        display: none !important;
      }
      li:hover .add, li:hover .remove{
        display: inline-block !important;
      }


    script.
      function update_table(event, values){
          values["feature"] = event.target.closest("li").dataset.feature;
          htmx.ajax("POST", "update-table", {target: "#model-container", values: values });
      }
      const add = (event) => update_table(event, {type: "feature", fromList: "unused", toList: "used"});
      const remove = (event) => update_table(event, {type: "feature", fromList: "used", toList: "unused"});
      const score = (event, diff) => update_table(event, {type: "score", diff: diff});
      
      const chart = new Chart(document.querySelector("#chart").getContext('2d'), {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'ROC area under curve per stage',
            borderColor: 'rgb(75, 192, 192)',
            data: data,
          }],
        },
        options: {
          scales: {
            y: {
              beginAtZero: false,
              min: 0.5,   // Set the minimum value of the y-axis
              max: 1.02,   // Set the maximum value of the y-axis
            }
          },
          animation: {
            duration: 0
          },
          responsive: true,
          maintainAspectRatio: false,
        }
      });

      function initialize() {
        // Send height to iframe parent
        window.parent.postMessage({ height: document.body.scrollHeight }, '*');

        // fix to delete orphaned tooltips
        document.querySelectorAll(".tooltip.bs-tooltip-auto").forEach(e => e.remove())
        document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(tr => new bootstrap.Tooltip(tr))

                
        chart.data.labels = labels;
        chart.data.datasets[0].data = data;
        chart.update();


        // SORTABLE STUFF
        //////////////////
        const observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            mutation.target.querySelectorAll(".cell.label").forEach(elem => {
            if (mutation.target.classList.contains('ghost')) {
              elem.classList.remove("col-3");
            } else {
              elem.classList.add("col-3");
            }
            });
          });
        });

        document.querySelectorAll('#feature-container li')
          .forEach(elem => {observer.observe(elem, {
            attributes: true,
            attributeFilter: ['class']
          });
        });

        document.querySelectorAll("#feature-container ul")
          .forEach(ul => {
            new Sortable(ul, {
              animation:150,
              group: "features",
              ghostClass: "ghost",	
              handle: ".draghandle",
              onEnd: function(evt) {
                if (evt.oldIndex !== evt.newIndex || evt.from.id !== evt.to.id) {
                  // Trigger htmx to send information to the server
                  evt.item.classList.add("ghost")
                  htmx.ajax("POST", "update-table", {
                    target: "#model-container",
                    values: {
                      type: "feature",
                      from: evt.oldIndex,
                      to: evt.newIndex,
                      feature: evt.item.dataset.feature,
                      fromList: evt.from.id,
                      toList: evt.to.id,
                    }
                  });
                }
              }
            });
          });


        // HISTORY STUFF
        /////////////////
        //-         const saveButton = document.getElementById('save');
        //-         const filenameInput = document.getElementById('save-name');
        //-         const saveConfirmButton = document.getElementById('save-confirm');
        //-
        //-         saveButton.addEventListener('click', function() {
        //-           filenameInput.classList.remove("d-none")
        //-           saveConfirmButton.classList.remove("d-none")
        //-           saveButton.classList.add("d-none")
        //-           filenameInput.focus();
        //-         });
        //-
        //-         function restoreSaveButton(){
        //-           filenameInput.classList.add("d-none")
        //-           saveConfirmButton.classList.add("d-none")
        //-           saveButton.classList.remove("d-none")
        //-         }

        // TODO will be converted to a htmx trigger
        //function saveHistory(){
        //-           const saveName = filenameInput.value.trim();
        //-           filenameInput.value = '';
        //-
        //-           // TODO ajax call replacing history
        //-           restoreSaveButton();
        //-         }
        //-
        //-
        //-         filenameInput.addEventListener('keydown', function(event) {
        //-           // TODO will be a htmx trigger
        //-           if (event.key === 'Enter') {
        //-             event.preventDefault(); // Prevent the default action to avoid form submission or any other unintended effects
        //-             saveHistory();
        //-           } else if (event.key === 'Escape') {
        //-             event.preventDefault(); // Prevent the default action to avoid form submission or any other unintended effects
        //-             restoreSaveButton();
        //-           }
        //-         });
        //filenameInput.addEventListener('blur', restoreSaveButton);
        // TODO will get a htmx event
        //saveConfirmButton.addEventListener('click', saveHistory);
      }

      htmx.on('DOMContentLoaded', initialize);

      htmx.on('htmx:configRequest', e => e.detail.headers['X-CSRFToken'] = "!{csrf_token}");

      htmx.on("htmx:beforeRequest", evt => {
        if (evt.detail.target.id == "model-container"){
          document.querySelectorAll("#model-container .loading")
            .forEach(e => {
              htmx.addClass(e, "opacity-25");
              Object.assign(e.style, {
                pointerEvents: "none",
                userSelect: "none"
              });
            });
        }
      });

      htmx.on("htmx:afterSwap", evt =>{
        if (evt.detail.target.id == "history"){
          document.getElementById("histlen").innerHTML = document.querySelectorAll("#hist-entries li").length;
          //restoreSaveButton();
        }
      });
      
      htmx.on('htmx:afterSettle', initialize);