doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport' content='width=device-width, initial-scale=1.0')
    title PSLvis
    // Include Bootstrap CSS from CDN
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet')
    link(href="https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/css/materialdesignicons.min.css" rel="stylesheet") 
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous")
    script(src="https://cdn.jsdelivr.net/npm/htmx.org@1.9.11/dist/htmx.min.js")
    script(src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js")
    script(src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js")
  body
    header.navbar.navbar-expand-lg.sticky-top.bg-success-subtle
      nav.container-xxl.flex-wrap.flex-lg-nowrap 
        ul.nav 
          li.nav-item 
            h1 PSLvis
        ul.nav
          li.nav-item
            a.link-secondary.link-underline.link-underline-opacity-0(href="https://github.com/TRR318/scikit-psl")
              span.mdi.mdi-github.fs-4.btn.btn-sm
              span Algorithm
          li.nav-item
            a.link-secondary.link-underline.link-underline-opacity-0(href="https://github.com/TRR318/pslvis")
              span.mdi.mdi-github.fs-4.btn.btn-sm
              span Visualization

    include history.pug
    include pslresult.pug
    

    style.
      .ghost :not(.label){
        display: none !important;
      }
      li:hover .add, li:hover .remove{
        display: inline-block !important;
      }


    script.
      function loadStart(){
        document.querySelectorAll("#feature-container .loading").forEach(e => {
          e.classList.add("opacity-25");
          e.style.pointerEvents = "none";
          e.style.userSelect = "none";
        });
        document.querySelectorAll("#feature-container .spinner-border")
          .forEach(e => e.classList.remove("d-none"));
      }

      function reset(){
        loadStart();
        htmx.ajax("GET", "/update-table", {
                    target: "#feature-container",
                    swap: "outerHTML",
                    values: {
                      type: "reset",
                    }
                  });
      }
      function add(){
        loadStart();
        htmx.ajax("GET", "/update-table", {
                    target: "#feature-container",
                    swap: "outerHTML",
                    values: {
                      type: "add",
                    }
                  });
      }
      function fill(){
        loadStart();
        htmx.ajax("GET", "/update-table", {
                    target: "#feature-container",
                    swap: "outerHTML",
                    values: {
                      type: "fill",
                    }
                  });
      }

      function initialize() {
        document.querySelectorAll("#feature-container ul")
          .forEach(ul => {
            new Sortable(ul, {
              animation:150,
              group: "features",
              ghostClass: "ghost",	
              handle: ".draghandle",
              onEnd: function(evt) {
                if (evt.oldIndex !== evt.newIndex || evt.from.id !== evt.to.id) {
                  // Trigger htmx to send information to the server
                  evt.item.classList.add("ghost")
                  loadStart();
                  htmx.ajax("GET", "/update-table", {
                    target: "#feature-container",
                    swap: "outerHTML",
                    values: {
                      type: "feature",
                      from: evt.oldIndex,
                      to: evt.newIndex,
                      feature: evt.item.dataset.feature,
                      fromList: evt.from.id,
                      toList: evt.to.id,
                    }
                  });
                }
              }
            });
          })

        // fix to delete orphaned tooltips
        document.querySelectorAll(".tooltip.bs-tooltip-auto").forEach(e => e.remove())
        document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(tr => new bootstrap.Tooltip(tr))
        
        const saveButton = document.getElementById('save');
        const filenameInput = document.getElementById('filename');
        const saveConfirmButton = document.getElementById('save-confirm');

        saveButton.addEventListener('click', function() {
          filenameInput.classList.remove("d-none")
          saveConfirmButton.classList.remove("d-none")
          saveButton.classList.add("d-none")
          filenameInput.focus();
        });

        function restoreSaveButton(){
          filenameInput.classList.add("d-none")
          saveConfirmButton.classList.add("d-none")
          saveButton.classList.remove("d-none")
        }

        function saveHistory(){
          const saveName = filenameInput.value.trim();
          filenameInput.value = '';
          
          // TODO ajax call replacing history
          // TODO then update history button count
          restoreSaveButton();
        }

        filenameInput.addEventListener('keydown', function(event) {
          if (event.key === 'Enter') {
            event.preventDefault(); // Prevent the default action to avoid form submission or any other unintended effects
            saveHistory();
          } else if (event.key === 'Escape') {
            event.preventDefault(); // Prevent the default action to avoid form submission or any other unintended effects
            restoreSaveButton();
          }
        });
        filenameInput.addEventListener('blur', restoreSaveButton);
        saveConfirmButton.addEventListener('click', saveHistory);      


        var observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
              mutation.target.querySelectorAll(".cell.label").forEach(elem => {
              if (mutation.target.classList.contains('ghost')) {
                elem.classList.remove("col-3");
              } else {
                elem.classList.add("col-3");
              }
            });
          });
        });

        document.querySelectorAll('li')
          .forEach(elem => {observer.observe(elem, {
            attributes: true,
            attributeFilter: ['class']
          });
        });

        document.querySelectorAll("#unused .add")
          .forEach(e => {
            e.onclick = e => {
              loadStart();          
              htmx.ajax("GET", "/update-table", {
                target: "#feature-container",
                swap: "outerHTML",
                values: {
                  type: "feature",
                  feature: e.target.closest("li").dataset.feature,
                  fromList: "unused",
                  toList: "used",
                }
              });
            }
          });
        document.querySelectorAll("#used .remove")
          .forEach(e => {
            e.onclick = e => {
              loadStart();          
              htmx.ajax("GET", "/update-table", {
                target: "#feature-container",
                swap: "outerHTML",
                values: {
                  type: "feature",
                  feature: e.target.closest("li").dataset.feature,
                  fromList: "used",
                  toList: "unused",
                }
              });
            }
          });

        document.querySelectorAll("#used .incr")
          .forEach(e => {
            e.onclick = e => {
              loadStart();
              htmx.ajax("GET", "/update-table", {
                target: "#feature-container",
                swap: "outerHTML",
                values: {
                  type: "score",
                  feature: e.target.closest("li").dataset.feature,
                  diff: 1
                }
              });
            }
          });

        document.querySelectorAll("#used .decr")
          .forEach(e => {
            e.onclick = e => {
              loadStart();
              htmx.ajax("GET", "/update-table", {
                target: "#feature-container",
                swap: "outerHTML",
                values: {
                  type: "score",
                  feature: e.target.closest("li").dataset.feature,
                  diff: -1
                }
              });
            }
          });

        new Chart(document.querySelector("#chart").getContext('2d'), {
          type: "line",
          data: {
            labels: !{labels},
            datasets: [{
              label: 'ROC area under curve per stage',
              data: !{metric},
              borderColor: 'rgb(75, 192, 192)' 
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: false,
                max: 1.02,   // Set the maximum value of the y-axis
              }
            },
            animation: {
              duration: 0
            },
            responsive: true,
            maintainAspectRatio: false,
          }
        });
      }

      document.addEventListener('DOMContentLoaded', initialize);
      document.body.addEventListener('htmx:afterSwap', initialize);